From aa8e6320c7d46fdb56d6a3e24985807b862e61da Mon Sep 17 00:00:00 2001
From: Hyunok Kim <hokim@inipro.net>
Date: Tue, 5 Jan 2021 12:05:48 +0900
Subject: [PATCH] vitis-ai-library: fix cmake error

Signed-off-by: Hyunok Kim <hokim@inipro.net>
---
 CMakeLists.txt              |  1 +
 overview/CMakeLists.txt     | 62 ++++++++++++++++++-------------------
 pointpillars/CMakeLists.txt |  5 +--
 3 files changed, 35 insertions(+), 33 deletions(-)

diff --git a/CMakeLists.txt b/CMakeLists.txt
index 191d9ff0..9e11d0e6 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -108,6 +108,7 @@ if(NOT OpenCV_FOUND)
   find_package(OpenCV_LIBS opencv_core opencv_video opencv_videoio opencv_imgproc opencv_imgcodecs opencv_highgui)
 endif(NOT OpenCV_FOUND)
 find_package(vart REQUIRED)
+find_package(Eigen3 REQUIRED)
 
 set(PACKAGE_COMPONENTS
   model_config
diff --git a/overview/CMakeLists.txt b/overview/CMakeLists.txt
index de1a9015..faac7373 100644
--- a/overview/CMakeLists.txt
+++ b/overview/CMakeLists.txt
@@ -431,39 +431,39 @@ install(FILES
   DESTINATION ${SAMPLE_INATLL_PATH}/pointpillars/)
 
 #cifar10classification
-add_executable(test_jpeg_cifar10classification ${CMAKE_CURRENT_SOURCE_DIR}/samples/cifar10classification/test_jpeg_cifar10classification.cpp)
-add_executable(test_performance_cifar10classification ${CMAKE_CURRENT_SOURCE_DIR}/samples/cifar10classification/test_performance_cifar10classification.cpp)
-target_link_libraries(test_jpeg_cifar10classification ${OpenCV_LIBS} glog::glog ${PROJECT_NAME}::cifar10classification)
-target_link_libraries(test_performance_cifar10classification ${OpenCV_LIBS} glog::glog ${PROJECT_NAME}::cifar10classification vart::util ${Pthread_LIB})
-install(TARGETS test_jpeg_cifar10classification DESTINATION ${SAMPLE_INATLL_PATH}/cifar10classification/)
-install(TARGETS test_performance_cifar10classification DESTINATION ${SAMPLE_INATLL_PATH}/cifar10classification/)
-install(FILES
-  ${CMAKE_CURRENT_SOURCE_DIR}/samples/cifar10classification/readme
-  ${CMAKE_CURRENT_SOURCE_DIR}/samples/cifar10classification/process_result.hpp
-  ${CMAKE_CURRENT_SOURCE_DIR}/samples/cifar10classification/test_jpeg_cifar10classification.cpp
-  ${CMAKE_CURRENT_SOURCE_DIR}/samples/cifar10classification/test_performance_cifar10classification.cpp
-  DESTINATION ${SAMPLE_INATLL_PATH}/cifar10classification/)
-install(FILES
-  ${CMAKE_CURRENT_SOURCE_DIR}/samples/cifar10classification/build.sh
-  PERMISSIONS OWNER_READ  OWNER_WRITE  OWNER_EXECUTE  GROUP_READ  GROUP_EXECUTE  WORLD_READ  WORLD_EXECUTE 
-  DESTINATION ${SAMPLE_INATLL_PATH}/cifar10classification/)
+#add_executable(test_jpeg_cifar10classification ${CMAKE_CURRENT_SOURCE_DIR}/samples/cifar10classification/test_jpeg_cifar10classification.cpp)
+#add_executable(test_performance_cifar10classification ${CMAKE_CURRENT_SOURCE_DIR}/samples/cifar10classification/test_performance_cifar10classification.cpp)
+#target_link_libraries(test_jpeg_cifar10classification ${OpenCV_LIBS} glog::glog ${PROJECT_NAME}::cifar10classification)
+#target_link_libraries(test_performance_cifar10classification ${OpenCV_LIBS} glog::glog ${PROJECT_NAME}::cifar10classification vart::util ${Pthread_LIB})
+#install(TARGETS test_jpeg_cifar10classification DESTINATION ${SAMPLE_INATLL_PATH}/cifar10classification/)
+#install(TARGETS test_performance_cifar10classification DESTINATION ${SAMPLE_INATLL_PATH}/cifar10classification/)
+#install(FILES
+#  ${CMAKE_CURRENT_SOURCE_DIR}/samples/cifar10classification/readme
+#  ${CMAKE_CURRENT_SOURCE_DIR}/samples/cifar10classification/process_result.hpp
+#  ${CMAKE_CURRENT_SOURCE_DIR}/samples/cifar10classification/test_jpeg_cifar10classification.cpp
+#  ${CMAKE_CURRENT_SOURCE_DIR}/samples/cifar10classification/test_performance_cifar10classification.cpp
+#  DESTINATION ${SAMPLE_INATLL_PATH}/cifar10classification/)
+#install(FILES
+#  ${CMAKE_CURRENT_SOURCE_DIR}/samples/cifar10classification/build.sh
+#  PERMISSIONS OWNER_READ  OWNER_WRITE  OWNER_EXECUTE  GROUP_READ  GROUP_EXECUTE  WORLD_READ  WORLD_EXECUTE 
+#  DESTINATION ${SAMPLE_INATLL_PATH}/cifar10classification/)
 
 #mnistclassification
-add_executable(test_jpeg_mnistclassification ${CMAKE_CURRENT_SOURCE_DIR}/samples/mnistclassification/test_jpeg_mnistclassification.cpp)
-add_executable(test_performance_mnistclassification ${CMAKE_CURRENT_SOURCE_DIR}/samples/mnistclassification/test_performance_mnistclassification.cpp)
-target_link_libraries(test_jpeg_mnistclassification ${OpenCV_LIBS} glog::glog ${PROJECT_NAME}::mnistclassification)
-target_link_libraries(test_performance_mnistclassification ${OpenCV_LIBS} glog::glog ${PROJECT_NAME}::mnistclassification vart::util ${Pthread_LIB})
-install(TARGETS test_jpeg_mnistclassification DESTINATION ${SAMPLE_INATLL_PATH}/mnistclassification/)
-install(TARGETS test_performance_mnistclassification DESTINATION ${SAMPLE_INATLL_PATH}/mnistclassification/)
-install(FILES
-  ${CMAKE_CURRENT_SOURCE_DIR}/samples/mnistclassification/readme
-  ${CMAKE_CURRENT_SOURCE_DIR}/samples/mnistclassification/test_jpeg_mnistclassification.cpp
-  ${CMAKE_CURRENT_SOURCE_DIR}/samples/mnistclassification/test_performance_mnistclassification.cpp
-  DESTINATION ${SAMPLE_INATLL_PATH}/mnistclassification/)
-install(FILES
-  ${CMAKE_CURRENT_SOURCE_DIR}/samples/mnistclassification/build.sh
-  PERMISSIONS OWNER_READ  OWNER_WRITE  OWNER_EXECUTE  GROUP_READ  GROUP_EXECUTE  WORLD_READ  WORLD_EXECUTE 
-  DESTINATION ${SAMPLE_INATLL_PATH}/mnistclassification/)
+#add_executable(test_jpeg_mnistclassification ${CMAKE_CURRENT_SOURCE_DIR}/samples/mnistclassification/test_jpeg_mnistclassification.cpp)
+#add_executable(test_performance_mnistclassification ${CMAKE_CURRENT_SOURCE_DIR}/samples/mnistclassification/test_performance_mnistclassification.cpp)
+#target_link_libraries(test_jpeg_mnistclassification ${OpenCV_LIBS} glog::glog ${PROJECT_NAME}::mnistclassification)
+#target_link_libraries(test_performance_mnistclassification ${OpenCV_LIBS} glog::glog ${PROJECT_NAME}::mnistclassification vart::util ${Pthread_LIB})
+#install(TARGETS test_jpeg_mnistclassification DESTINATION ${SAMPLE_INATLL_PATH}/mnistclassification/)
+#install(TARGETS test_performance_mnistclassification DESTINATION ${SAMPLE_INATLL_PATH}/mnistclassification/)
+#install(FILES
+#  ${CMAKE_CURRENT_SOURCE_DIR}/samples/mnistclassification/readme
+#  ${CMAKE_CURRENT_SOURCE_DIR}/samples/mnistclassification/test_jpeg_mnistclassification.cpp
+#  ${CMAKE_CURRENT_SOURCE_DIR}/samples/mnistclassification/test_performance_mnistclassification.cpp
+#  DESTINATION ${SAMPLE_INATLL_PATH}/mnistclassification/)
+#install(FILES
+#  ${CMAKE_CURRENT_SOURCE_DIR}/samples/mnistclassification/build.sh
+#  PERMISSIONS OWNER_READ  OWNER_WRITE  OWNER_EXECUTE  GROUP_READ  GROUP_EXECUTE  WORLD_READ  WORLD_EXECUTE 
+#  DESTINATION ${SAMPLE_INATLL_PATH}/mnistclassification/)
 
 #medicalsegcell
 add_executable(test_jpeg_medicalsegcell  ${CMAKE_CURRENT_SOURCE_DIR}/samples/medicalsegcell/test_jpeg_medicalsegcell.cpp)
diff --git a/pointpillars/CMakeLists.txt b/pointpillars/CMakeLists.txt
index 63806bee..8707df60 100644
--- a/pointpillars/CMakeLists.txt
+++ b/pointpillars/CMakeLists.txt
@@ -80,8 +80,9 @@ target_include_directories(${COMPONENT_NAME} PUBLIC
   $<INSTALL_INTERFACE:include>
 )
 
-include_directories("${CMAKE_SYSROOT}/usr/include/eigen3/")
-include_directories("${CMAKE_SYSROOT}/usr/include/eigen3/Eigen/unsupported")
+#include_directories("${CMAKE_SYSROOT}/usr/include/eigen3/")
+#include_directories("${CMAKE_SYSROOT}/usr/include/eigen3/Eigen/unsupported")
+target_link_libraries(${COMPONENT_NAME} PUBLIC Eigen3::Eigen)
 
 set_target_properties(${COMPONENT_NAME} PROPERTIES
   VERSION "${PROJECT_VERSION}"
